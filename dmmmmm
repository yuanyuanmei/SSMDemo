1. aop下的验证方法修改
            // 获得注解中需要校验参数类
            //常规方法获取参数
//            Object obj = null;
//            for(int i = 0;i<joinPoint.getArgs().length;i++){
//                if(custom.value().equals(joinPoint.getArgs()[i].getClass())){
//                    obj = joinPoint.getArgs()[i];
//                    break;
//                }
//            }
            //jdk8新特性filter过滤属性+三元运算符
            List<Object> objects = Arrays.stream(joinPoint.getArgs())
                    .filter(Object -> Object.getClass().equals(custom.value()))
                    .collect(Collectors.toList());
            Object obj = objects.size() > 0 ? objects.get(0) : null;
            
2.userBaseServiceImpl替换枚举值

        List<UserBaseBean> list = baseDao.list();
        list.forEach(item -> {
            item.setTypeName(EnumUserType.getValueByKey(item.getType()));
        });
        PageHelper.startPage(pageDto.getPageNo(),pageDto.getPageSize());
        return new PageInfo<>(list);
        
3.枚举中添加根据key获取value方法

    public static String keyOf(Integer key){
        List<EnumUserType> collect = list.stream().filter(item -> item.key.equals(key)).collect(Collectors.toList());
        String value = collect.size() > 0 ? collect.get(0).getValue() : "";
        return value;
    }
    
4.增加BaseServiceImpl

@Service
public abstract class BaseServiceImpl<T> implements BaseService<T> {

    @Autowired
    private BaseDao<T> baseDao;

    @Override
    public PageInfo<T> pageList(PageDto pageDto) {
        List<T> list = baseDao.list();
        PageHelper.startPage(pageDto.getPageNo(),pageDto.getPageSize());
        return new PageInfo<>(list);
    }

}

5.增加枚举存储路径
package com.dm.example.enums;

import com.dm.example.constants.ApiFuncConsts;
import com.dm.example.constants.ApiModuleConsts;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public enum EnumViewType {

    //404页面
    ERROR_404(ApiModuleConsts.ERROR+ ApiFuncConsts.ERROR_404,"error/404","404"),

    //500页面
    ERROR_500(ApiModuleConsts.ERROR+ ApiFuncConsts.ERROR_500,"error/500","500"),

    //600页面
    ERROR_600(ApiModuleConsts.ERROR+ ApiFuncConsts.ERROR_600,"error/600","没有权限"),

    //登录页面
    LONGIN(ApiModuleConsts.USER+ ApiFuncConsts.LOGIN,"view/login","登录"),

    //注册
    REGISTER(ApiModuleConsts.USER+ ApiFuncConsts.REIGISTER,"view/register","注册"),

    //用户列表
    ADMIN_INDEX(ApiModuleConsts.ADMIN+ ApiFuncConsts.INDEX,"admin/index","后台管理"),

    //用户列表
    SYS_USER(ApiModuleConsts.SYS+ ApiFuncConsts.USER,"admin/index","用户管理"),

    //角色列表
    SYS_ROLE(ApiModuleConsts.SYS+ ApiFuncConsts.ROLE,"admin/index","角色管理"),

    //菜单列表
    SYS_MENU(ApiModuleConsts.SYS+ ApiFuncConsts.MENU,"admin/index","菜单管理"),

    //登出页面
    LOGOUT(ApiModuleConsts.USER+ ApiFuncConsts.LOGOUT,"view/login","登出");

    private String request;

    private String response;

    private String title;

    EnumViewType(String request,String response,String title){
        this.request = request;
        this.response = response;
        this.title = title;
    }

    public final String getRequest() {
        return request;
    }

    public final String getResponse() {
        return response;
    }

    public final String getTitle() {
        return title;
    }

    /**
     * 根据Key查找枚举
     * @param request
     * @return
     */
    public static EnumViewType RequestOf(String request){
        List<EnumViewType> collect = list.stream().filter(item -> item.request.equals(request)).collect(Collectors.toList());
        EnumViewType obj = collect.size() > 0 ? collect.get(0) : null;
        return obj;
    }
    //枚举的变量必须为static静态
    public static List<EnumViewType> list = Arrays.asList(values());

}


