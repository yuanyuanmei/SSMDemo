<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--1.配置springMVC-->
    <!--开启springMVC注解模式-->
    <!-- 简化配置
    （1）自动注册DefaultAnnotationHandlerMapping，AnnotationMethodHandlerAdapter
    （2）默认提供一系列功能：数据绑定，数字和日期的format，xml和json默认读写支持-->

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- servlet-mapping映射路径：“/” -->
    <!-- 二、静态资源默认servlet配置
     1：加入对静态资源的处理：js、gif、png
     2：允许使用“/”做整体映射-->
    <mvc:default-servlet-handler/>

    <!--配置jsp，显示ViewResolver-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/page/" />
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--四，扫描web相关的bean-->
    <context:component-scan base-package="com.dm.example.controller"/>

    <!--全局异常配置-->
    <bean class="com.dm.example.exception.CustomExceptionResolver" />

    <!--
    JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力，
    Spring通过Java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。

    CGLib是一个强大、高性能的Code生产类库，可以实现运行期动态扩展java类，Spring在运行期间通过
    CGlib继承要被动态代理的类，重写父类的方法，实现AOP面向切面编程呢。

    区别：
    JDK动态代理是面向接口的。
    CGLib动态代理是通过字节码底层继承要代理类来实现（如果被代理类被final关键字所修饰，那么抱歉会失败）。
    -->

    <!--声明 aspect注解 proxy-target-class="true" 开启则表示启用cglib代理.-->
    <aop:aspectj-autoproxy />

    <!--扫描aop包-->
    <context:component-scan base-package="com.dm.example.aop"/>

    <!--实例化spring上下文对象-->
    <bean id="springContextUtil" class="com.dm.example.util.SpringContextUtil" />

</beans>
